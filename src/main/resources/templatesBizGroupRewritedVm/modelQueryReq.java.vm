package pers.jhshop.${package.ModuleName}.model.req;

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${package.Entity}.${entity};
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.Accessors;

import java.io.Serializable;
import java.time.LocalDateTime;

/**
 * <p>
 * $!{table.comment}查询Req
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${entityLombokModel})
@Data
#if(${superEntityClass})
@EqualsAndHashCode(callSuper = true)
#else
@EqualsAndHashCode(callSuper = false)
#end
@Accessors(chain = true)
#end
#if(${table.convert})
#end
#if(${swagger2})
@ApiModel(value = "${entity}QueryReq", description = "$!{table.comment}查询Req")
#end
##
###if(${superEntityClass})
##public class ${entity} extends ${superEntityClass}#if(${activeRecord})<${entity}>#end {
###elseif(${activeRecord})
##public class ${entity} extends Model<${entity}> {
###else
##public class ${entity} implements Serializable {
###end
public class ${entity}QueryReq extends Page<${entity}> implements Serializable {

    private static final long serialVersionUID = 1L;
## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
#if(!("CREATE_TIME" == ${field.name}) && !("UPDATE_TIME"==${field.name}))## 非主键

#if(${field.keyFlag})
#set($keyPropertyName=${field.propertyName})
#end
#if("$!field.comment" != "")
#if(${swagger2})
###if(${field.propertyType} == "String")
##    @ApiModelProperty(value = "${field.comment}-模糊匹配")
###else
##    @ApiModelProperty(value = "${field.comment}")
###end
    @ApiModelProperty(value = "${field.comment}")
#else
    /**
     * ${field.comment}
     */
#end
#end
#end
#if(${field.keyFlag})
## 主键
#if(${field.keyIdentityFlag})
##    @TableId(value = "${field.name}", type = IdType.AUTO)
#elseif(!$null.isNull(${idType}) && "$!idType" != "")
    @TableId(value = "${field.name}", type = IdType.${idType})
#elseif(${field.convert})
    @TableId("${field.name}")
#end
## 普通字段
#elseif(${field.fill})
## -----   存在字段填充设置   -----
#if(${field.convert})
##    @TableField(value = "${field.name}", fill = FieldFill.${field.fill})
#else
##    @TableField(fill = FieldFill.${field.fill})
#end
#elseif(${field.convert})
##    @TableField("${field.name}")
#end
## 乐观锁注解
#if(${versionFieldName}==${field.name})
    @Version
#end
## 逻辑删除注解
#if(${logicDeleteFieldName}==${field.name})
    @TableLogic
#end
#if(!("CREATE_TIME" == ${field.name}) && !("UPDATE_TIME"==${field.name}))
## 非主键
#if(${field.propertyType} == "String")
    private ${field.propertyType} ${field.propertyName};

    @ApiModelProperty(value = "${field.comment}-模糊匹配")
    private ${field.propertyType} ${field.propertyName}Like;
#else
#if("VALID_FLAG" == ${field.name})
    private Boolean ${field.propertyName};
#else
    private ${field.propertyType} ${field.propertyName};
#end
#end
#end
#end

#if($entity.contains("Group"))
    @ApiModelProperty(value = "关键字-模糊匹配")
    private String keywords;
#end
## ----------  END 字段循环遍历  ----------

#if(!${entityLombokModel})
#foreach($field in ${table.fields})
#if(${field.propertyType.equals("boolean")})
#set($getprefix="is")
#else
#set($getprefix="get")
#end

    public ${field.propertyType} ${getprefix}${field.capitalName}() {
        return ${field.propertyName};
    }

#if(${entityBuilderModel})
    public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
#else
    public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
#end
        this.${field.propertyName} = ${field.propertyName};
#if(${entityBuilderModel})
        return this;
#end
    }
#end
#end

#if(${entityColumnConstant})
#foreach($field in ${table.fields})
    public static final String ${field.name.toUpperCase()} = "${field.name}";

#end
#end
###if(${activeRecord})
##    @Override
##    protected Serializable pkVal() {
###if(${keyPropertyName})
##        return this.${keyPropertyName};
###else
##        return null;
###end
##    }
##
###end
#if(!${entityLombokModel})
    @Override
    public String toString() {
        return "${entity}{" +
#foreach($field in ${table.fields})
#if($!{foreach.index}==0)
        "${field.propertyName}=" + ${field.propertyName} +
#else
        ", ${field.propertyName}=" + ${field.propertyName} +
#end
#end
        "}";
    }
#end
}
